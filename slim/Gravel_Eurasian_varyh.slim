// set up a simple neutral simulation 
initialize() { 
initializeMutationRate(1.8e-08*(2.31/3.31)*10); 
initializeTreeSeq(); 

//define dominance model
defineConstant("dominance", 2); //1=additive; 2=partial; 3=recessive


// m1 mutation type: nonsyn 
// muts added at 2.31/3.31 the mutation rate, syn muts added w/msprime 
initializeMutationType("m1", 0.5, "g", -0.01026*10, 0.186); 

// m2 mutation type: adaptive //remove for now
// defineConstant("adaptsel", runif(1,0.0001*10,0.01*10)); 
// initializeMutationType("m2", 0.5, "s", "return adaptsel;"); //0.0125*10 
// m2.convertToSubstitution == T; 

//genomic element: exon and uses a mixture of syn and nonsyn at a 1:2.31 ratio (Huber et al.) 
initializeGenomicElementType("g1", c(m1), c(1.0)); // no synonymous muts 

//read in exon and recomb info 
info_lines = readFile("/Users/xinjunzhang/Desktop/Dominance_project/simulation/sim_seq_info_seg1.txt"); //chr1 60mb-80mb 

//recombination 
rec_ends = NULL; 
rec_rates = NULL; 
for (line in info_lines[substr(info_lines, 0, 2) == "rec"]) 
{ 
components = strsplit(line, " "); 
rec_ends = c(rec_ends, asInteger(components[1])); 
rec_rates = c(rec_rates, asFloat(components[2])); 
} 
//multiply rec rates by scaling factor 
initializeRecombinationRate(0.5*(1-(1-2*rec_rates)^10), rec_ends); 

//exons 
for (line in info_lines[substr(info_lines, 0, 2) == "exo"]) 
{ 
components = strsplit(line, " "); 
exon_starts = asInteger(components[1]); 
exon_ends = asInteger(components[2]); 
initializeGenomicElement(g1, exon_starts, exon_ends); 
} 

} 

1:8900 fitness(m1) { 

if (dominance ==1){ 
h = mut.mutationType.dominanceCoeff; 
if (homozygous) { 
return ((1.0 + 0.5*mut.selectionCoeff)*(1.0 + 0.5*mut.selectionCoeff)); 
} else { 
return (1.0 + mut.selectionCoeff * h); 
} 
} 

else if (dominance == 2){ 

h = (0.5)/(1 - 7071.07*(mut.selectionCoeff/10)); 
if (homozygous) { 
return ((1.0 + 0.5*mut.selectionCoeff)*(1.0 + 0.5*mut.selectionCoeff)); 
} else { 
return (1.0 + mut.selectionCoeff * h); 
} 
} 

else if (dominance ==3){ 
h = mut.mutationType.dominanceCoeff; 
if (homozygous) { 
return (1.0 + mut.selectionCoeff); 
} else { 
return (1.0 + mut.selectionCoeff * h); 
} 
} 

} 


// burn-in for ancestral population 
1 early() { 

sim.addSubpop("p1", 730); 
defineConstant("simID",getSeed());
sim.tag = simID; 

} 


// after burn-in, split off Neanderthals (p2) 
7300 early() { 
sim.addSubpopSplit("p2", 100, p1); 
} 



// set African population size 
8340 early() { 
p1.setSubpopulationSize(1447); 
} 

// split off Asian-Eur ancestor (p3) 
8696 early() { 
sim.addSubpopSplit("p3", 186, p1); 
p1.setMigrationRates(c(p2, p3), c(0, 0.00015)); 
p3.setMigrationRates(c(p1, p2), c(0.00015, 0)); 
} 

// Neanderthal hybridization to Eurasian ancestors
8734 late() { 
sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); 
p3.setMigrationRates(c(p2), c(0.1)); //10%
} 


8735 late() { 
p3.setMigrationRates(c(p2), c(0.0)); 
//p3.setSubpopulationSize(0); 
} 


//Neanderthal sample 
8748 late() { 
sim.treeSeqRememberIndividuals(sample(p2.individuals, 2)); 
p2.setSubpopulationSize(0); 
} 

//split off Asians (p4) from Eurasians (p3)
8807 late() { 
sim.addSubpopSplit("p4", 55, p3); 
}

// European founder bottleneck 
8808 early() { 
p3.setSubpopulationSize(132); 
p1.setMigrationRates(c(p3), c(2.5e-05)); 
p3.setMigrationRates(c(p1), c(2.5e-05)); 
}

// Asian founder bottleneck 
8808 early() { 
p4.setSubpopulationSize(55); 
p1.setMigrationRates(c(p4), c(7.8e-06)); 
p4.setMigrationRates(c(p1), c(7.8e-06)); 
p3.setMigrationRates(c(p4), c(3.11e-05)); 
p4.setMigrationRates(c(p3), c(3.11e-05)); 
} 

// Asian exponential growth 
8808:8900 { 
newSize = asInteger(round(1.048^(sim.generation - 8808) * 55)); 
p4.setSubpopulationSize(newSize); 
} 

// European exponential growth 
8808:8900 { 
newSize2 = asInteger(round(1.038^(sim.generation - 8808) * 132)); 
p3.setSubpopulationSize(newSize2); 
} 

8900 late() { 
sim.treeSeqOutput("/Users/xinjunzhang/Desktop/Dominance_project/simulation/chr1-20MB_" + asString(dominance) + "_rep" + asString(simID) + ".trees"); 
//print(p3.individualCount);
//print(p4.individualCount);
} 
